{"name":"SecureNIO","tagline":"A minimal, non-blocking Java NIO TCP framework supporting SSL/TLS","body":"# <h1 align=center>![SecureNIO](https://github.com/dermitza/SecureNIO/raw/master/SecureNIO.png) SecureNIO<h1>\r\n## <h2 align=center>A minimal, non-blocking, Java NIO TCP framework supporting SSL/TLS<h2>\r\n## Features\r\n* _Non-blocking -_ Exclusively.\r\n* _Minimal -_ Compiled .jar is 121KB small, only the essentials are included.\r\n* _Scalable -_ Supporting thousands of concurrent sockets, optimized for small data-size, short-lived communication.\r\n* _Small memory footprint -_ Server memory usage: ~10MB idle, ~200MB for 1000 concurrent two-way SSL/TLS clients.\r\n* _Simple -_ Implement your custom packets extending a single interface, and override two simple methods to get started.\r\n* _Well-documented -_ LOL\r\n* _Extensible -_ Custom packets and packet workers supported.\r\n* _SSL/TLS support -_ Supports both SSL/TLS encrypted and non-encrypted SocketChannels\r\n* _One or two-way SSL/TLS authentication -_ You decide.\r\n* _Configurable SSL/TLS protocols supported -_ via text file.\r\n* _Configurable cipher suites supported -_ via text file.\r\n* _Auto-scaling packet buffers -_ Never miss another application packet.\r\n* _Variable length packets -_ Variable length application packets are supported.\r\n* _Supports timeouts -_ Timeouts are internally used to disconnect expired SSL sessions, but can also be used extrinsically (e.g. to disconnect from a remote peer, to re-validate an SSL handshake and so on).\r\n\r\n## Changes\r\n\r\n* _v0.19_\r\n  * Fixed an error where the SSLEngine may fail with IllegalStateException in some cases when receiving unexpected kinds of SSL records after being closed\r\n  * Fixed an error where if the SO_SNDBUF was full the selector would hang as we do not (re-)register for writes. As such, flushing() is now blocking until all data has been written to the socket\r\n  * Implemented (partial) logging\r\n  * Read static variables from properties on disk\r\n  * Additional support classes\r\n  * Additional javadoc (yay)\r\n* _v0.18 -_ First released version\r\n\r\n## Binaries\r\n\r\nAll binaries are compiled using Java 1.7.0_09; Java HotSpot(TM) 64-Bit Server VM 23.5-b02 unless otherwise noted.\r\n\r\n* _Version 0.19 -_ [SecureNIO\\_v0.19.jar](https://github.com/dermitza/SecureNIO/raw/master/dist/SecureNIO_v0.19.jar)  [SecureNIO_v0.19_doc.zip](https://github.com/dermitza/SecureNIO/raw/master/dist/SecureNIO_v0.19_doc.zip)\r\n* _Version 0.18 -_ [SecureNIO\\_v0.18.jar](https://github.com/dermitza/SecureNIO/raw/master/dist/SecureNIO_v0.19.jar)  [SecureNIO_v0.18_doc.zip](https://github.com/dermitza/SecureNIO/raw/master/dist/SecureNIO_v0.18_doc.zip)\r\n\r\n## Documentation\r\n\r\n### Examples\r\n\r\nTwo examples on how to use this framework are provided, each in their respective packages:\r\n\r\n* _ch.dermitza.securenio.test.singlebyte -_ A simple, one byte long application packet client/server implementation\r\n* _ch.dermitza.securenio.test.variablebyte -_ A simple, variable byte application packet client/server implementation\r\n\r\n### Generating self-signed KeyStores (public and private keys) and TrustStores (public keys)\r\n\r\nSample server and client KeyStores and TrustStores have been provided and are ready to use. Needless to say, **do not use these for anything other than testing**. Steps to create a self-signed KeyStore (and certificates) and TrustStore for a server implementation:\r\n\r\n1. Generate a server KeyStore\r\n```\r\nkeytool -genkey -keyalg RSA -alias server -keystore server.jks -storepass server -validity 360 -keysize 2048\r\n```\r\n2. Extract the public key from the public-private key pair that you created\r\n```\r\nkeytool -export -alias server -keystore server.jks -rfc -file serverPublic.cert\r\n```\r\n3. Create the truststore using the public key (advised to use a different password, e.g. serverPublic)\r\n```\r\nkeytool -import -alias server -file serverPublic.cert -keystore serverPublic.jks -storetype JKS\r\n```\r\n\r\nYou can now use the serverPublic.jks in your clients to authenticate the server. To generate a KeyStore and/or TrustStore for the client (two-way authentication), repeat the above steps using appropriate names (i.e. replace server with client where appropriate).\r\n\r\n### JavaDoc\r\nYou can browse the JavaDoc for the current release [here](https://dermitza.github.io/SecureNIO/doc/). Additional documentation (sometimes extensive) is included in the source files.\r\n\r\n## License\r\n\r\nGNU AFFERO GENERAL PUBLIC LICENSE Version 3\r\n\r\nCopyright (C) 2014 K. Dermitzakis <dermitza@gmail.com>\r\n \r\nSecureNIO is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nSecureNIO is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Affero General Public License along with SecureNIO. If not, see <http://www.gnu.org/licenses/>.\r\n","google":"UA-28803915-10","note":"Don't delete this file! It's used internally to help with page regeneration."}